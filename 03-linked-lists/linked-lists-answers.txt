What is Spatial Locality and why does it benefit performance?

Spatial locality refers to the close distance of objects in memory, especially when
we are talking about computers. In this context, we are talking about array
and it reminds us that when initializing array, a block of memory is then cut
and assigned to this variable. In small situations, this is beneficial
regards performance. Why? Because when accessing an array, the memory manager
draw the value of the array that you need to access but it will also anticipate that
you might want to access others nearby. So, he is caching a series of them
for easy and quick access.

But in a large situation we can froze the computer because you can use all the memory of it.

Compare the performance of an Array to a Linked List using the Benchmark module.
Compare the time it takes to create a 10,000 item Array to appending 10,000 items to a Linked List.

  result = Benchmark.measure {
    testArray = Array.new
    10000.times do |x|
      testArray[x] = x
    end
  }
  #<Benchmark::Tms:0x007fdc8a927ca0 @label="", @real=0.0007429998368024826, @cstime=0.0, @cutime=0.0, @stime=0.0, @utime=0.0, @total=0.0>

  result1 = Benchmark.measure {
    llist = LinkedList.new
    10000.times do |x|
      llist.add_to_tail(Node.new(x))
    end
  }
  #<Benchmark::Tms:0x007fdebe167390 @label="", @real=0.0044280001893639565, @cstime=0.0, @cutime=0.0, @stime=0.0, @utime=0.009999999999999995, @total=0.009999999999999995>

Compare the time it takes to access the 5000th element of the Array and the 5000th Node in the Linked List.
  result_find_array = Benchmark.measure {
    y = testArray[5000]
  }
  #<Benchmark::Tms:0x007fa6868c7510 @label="", @real=2.9997900128364563e-06, @cstime=0.0, @cutime=0.0, @stime=0.0, @utime=0.0, @total=0.0>

  llist = LinkedList.new
  10000.times do |x|
    llist.add_to_tail(Node.new(x))
  end

  result_find_node = Benchmark.measure {
    node = llist.head
    5000.times do |x|
      node = node.next
    end
  }
  => #<Benchmark::Tms:0x007ff0e38d5848 @label="", @real=0.00031999964267015457, @cstime=0.0, @cutime=0.0, @stime=0.0, @utime=0.0, @total=0.0>


Compare the time it takes to remove the 5000th element from the Array to removing the 5000th Node in the Linked List.
In the Array, the 5001st item becomes the 5000th, and so on.

testArray = Array.new
10000.times do |x|
  testArray[x] = x
end

delete_5000_array = Benchmark.measure {
  testArray.slice!(5000,1)
}
=> #<Benchmark::Tms:0x007f9c9c055330 @label="", @real=9.000301361083984e-06, @cstime=0.0, @cutime=0.0, @stime=0.0, @utime=0.0, @total=0.0>

llist = LinkedList.new
remove_node = Node.new
10000.times do |x|
  if x === 5000
    remove_node = Node.new(x)
    puts "5000"
    llist.add_to_tail(remove_node)
  else
    llist.add_to_tail(Node.new(x))
  end
end

result_delete_node = Benchmark.measure {
  llist.delete(remove_node)
  }
#<Benchmark::Tms:0x007ff0e40d3c20 @label="", @real=0.0006290003657341003, @cstime=0.0, @cutime=0.0, @stime=0.0, @utime=0.0, @total=0.0>
